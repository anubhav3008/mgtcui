(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["VueAutosuggest"] = factory();
	else
		root["VueAutosuggest"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file.
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = injectStyles
  }

  if (hook) {
    var functional = options.functional
    var existing = functional
      ? options.render
      : options.beforeCreate

    if (!functional) {
      // inject component registration as beforeCreate hook
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    } else {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return existing(h, context)
      }
    }
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ../node_modules/babel-loader/lib!../node_modules/vue-loader/lib/selector.js?type=script&index=0!../src/parts/DefaultSection.vue
var DefaultSection = __webpack_require__(5);
var DefaultSection_default = /*#__PURE__*/__webpack_require__.n(DefaultSection);

// CONCATENATED MODULE: ../node_modules/vue-loader/lib/template-compiler?{"id":"data-v-c0c3c0e4","hasScoped":false,"buble":{"transforms":{}}}!../node_modules/vue-loader/lib/selector.js?type=template&index=0!../src/parts/DefaultSection.vue
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',{attrs:{"role":"listbox","aria-labelledby":"autosuggest"}},[(_vm.section.label)?_c('li',{class:_vm.className},[_vm._v(_vm._s(_vm.section.label))]):_vm._e(),_vm._v(" "),_vm._l((_vm.list),function(val,key){return _c('li',{key:_vm.getItemIndex(key),class:{'autosuggest__results_item-highlighted' : _vm.getItemIndex(key) == _vm.currentIndex, 'autosuggest__results_item':true},attrs:{"role":"option","data-suggestion-index":_vm.getItemIndex(key),"data-section-name":_vm.section.name,"id":("autosuggest__results_item-" + (_vm.getItemIndex(key)))},domProps:{"innerHTML":_vm._s(_vm.styleItem(val))},on:{"mouseenter":_vm.onMouseEnter,"mouseleave":_vm.onMouseLeave}})})],2)}
var staticRenderFns = []
var esExports = { render: render, staticRenderFns: staticRenderFns }
/* harmony default export */ var parts_DefaultSection = (esExports);
// CONCATENATED MODULE: ../src/parts/DefaultSection.vue
var normalizeComponent = __webpack_require__(0)
/* script */

/* template */

/* template functional */
  var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = null
/* scopeId */
var __vue_scopeId__ = null
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  DefaultSection_default.a,
  parts_DefaultSection,
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)

/* harmony default export */ var src_parts_DefaultSection = __webpack_exports__["default"] = (Component.exports);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(3), __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./Autosuggest.vue"), require("./parts/DefaultSection.vue"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.Autosuggest, global.DefaultSection);
    global.index = mod.exports;
  }
})(this, function (exports, _Autosuggest, _DefaultSection) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DefaultSection = exports.VueAutosuggest = undefined;

  var _Autosuggest2 = _interopRequireDefault(_Autosuggest);

  var _DefaultSection2 = _interopRequireDefault(_DefaultSection);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var VueAutosuggest = {
    install: function install(Vue) {
      Vue.component("vue-autosuggest-default-section", _DefaultSection2.default);
      Vue.component("vue-autosuggest", _Autosuggest2.default);
    }
  };

  exports.default = VueAutosuggest;
  exports.VueAutosuggest = VueAutosuggest;
  exports.DefaultSection = _DefaultSection2.default;


  if (typeof window !== "undefined" && window.Vue) {
    window.Vue.use(VueAutosuggest);
  }
});

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });

// EXTERNAL MODULE: ../node_modules/babel-loader/lib!../node_modules/vue-loader/lib/selector.js?type=script&index=0!../src/Autosuggest.vue
var Autosuggest = __webpack_require__(4);
var Autosuggest_default = /*#__PURE__*/__webpack_require__.n(Autosuggest);

// CONCATENATED MODULE: ../node_modules/vue-loader/lib/template-compiler?{"id":"data-v-0a7059aa","hasScoped":false,"buble":{"transforms":{}}}!../node_modules/vue-loader/lib/selector.js?type=template&index=0!../src/Autosuggest.vue
var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"autosuggest"}},[_c('input',_vm._b({directives:[{name:"model",rawName:"v-model",value:(_vm.searchInput),expression:"searchInput"}],staticClass:"form-control",class:[_vm.isOpen ? 'autosuggest__input-open' : '', _vm.inputProps['class']],attrs:{"name":"q","type":"text","autocomplete":"off","aria-autosuggest":"list","aria-owns":"autosuggest__results","aria-activedescendant":_vm.isOpen && _vm.currentIndex !== null ? ("autosuggest__results--item-" + _vm.currentIndex) : '',"aria-haspopup":_vm.isOpen ? 'true' : 'false'},domProps:{"value":(_vm.searchInput)},on:{"keydown":_vm.handleKeyStroke,"click":_vm.onClick,"input":function($event){if($event.target.composing){ return; }_vm.searchInput=$event.target.value}}},'input',_vm.inputProps,false)),_vm._v(" "),_c('div',{staticClass:"autosuggest__results-container"},[(_vm.getSize() > 0 && !_vm.loading)?_c('div',{staticClass:"autosuggest__results",attrs:{"role":"listbox","aria-labelledby":"autosuggest"}},_vm._l((this.computedSections),function(cs,key){return _c(cs.type,{key:_vm.getSectionRef(key),ref:_vm.getSectionRef(key),refInFor:true,tag:"component",attrs:{"section":cs,"updateCurrentIndex":_vm.updateCurrentIndex,"searchInput":_vm.searchInput}})})):_vm._e()])])}
var staticRenderFns = []
var esExports = { render: render, staticRenderFns: staticRenderFns }
/* harmony default export */ var selectortype_template_index_0_src_Autosuggest = (esExports);
// CONCATENATED MODULE: ../src/Autosuggest.vue
var normalizeComponent = __webpack_require__(0)
/* script */

/* template */

/* template functional */
  var __vue_template_functional__ = false
/* styles */
var __vue_styles__ = null
/* scopeId */
var __vue_scopeId__ = null
/* moduleIdentifier (server only) */
var __vue_module_identifier__ = null
var Component = normalizeComponent(
  Autosuggest_default.a,
  selectortype_template_index_0_src_Autosuggest,
  __vue_template_functional__,
  __vue_styles__,
  __vue_scopeId__,
  __vue_module_identifier__
)

/* harmony default export */ var src_Autosuggest = __webpack_exports__["default"] = (Component.exports);


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof exports !== "undefined") {
        factory(exports, require("./parts/DefaultSection.vue"));
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports, global.DefaultSection);
        global.Autosuggest = mod.exports;
    }
})(this, function (exports, _DefaultSection) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _DefaultSection2 = _interopRequireDefault(_DefaultSection);

    function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
            default: obj
        };
    }

    exports.default = {
        name: "autosuggest",
        components: {
            DefaultSection: _DefaultSection2.default
        },
        props: {
            inputProps: {
                id: {
                    type: String,
                    default: "autosuggest__input"
                },
                onInputChange: {
                    type: Function,
                    required: true
                },
                initialValue: {
                    type: String,
                    default: ""
                },
                onClick: {
                    type: Function,
                    required: false
                }
            },
            limit: {
                type: Number,
                required: false,
                default: Infinity
            },
            suggestions: {
                type: Array,
                required: true,
                default: []
            },
            shouldRenderSuggestions: {
                type: Function,
                required: false,
                default: function _default() {
                    return true;
                }
            },
            sectionConfigs: {
                type: Object,
                required: false,
                default: function _default() {
                    return {
                        default: {
                            onSelected: null
                        }
                    };
                }
            },
            onSelected: {
                type: Function,
                required: false,
                default: null
            }
        },
        data: function data() {
            return {
                searchInput: "",
                searchInputOriginal: null,
                currentIndex: null,
                currentItem: null,
                loading: false /** Helps with making sure the dropdown doesn't stay open after certain actions */
                , didSelectFromOptions: false,
                computedSections: [],
                computedSize: 0
            };
        },
        computed: {
            isOpen: function isOpen() {
                return this.getSize() > 0 && this.shouldRenderSuggestions() && !this.loading;
            }
        },
        created: function created() {
            if (!this.inputProps.onClick) {
                this.inputProps.onClick = this._onClick;
            }
        },

        methods: {
            _onClick: function _onClick() {
                return this;
            },
            _onSelected: function _onSelected() {
                if (this.currentItem && this.sectionConfigs[this.currentItem.name] && this.sectionConfigs[this.currentItem.name].onSelected) {
                    this.sectionConfigs[this.currentItem.name].onSelected(this.currentItem, this.searchInputOriginal);
                } else if (this.sectionConfigs["default"].onSelected) {
                    this.sectionConfigs["default"].onSelected(null, this.searchInputOriginal);
                } else {
                    this.onSelected && this.onSelected(this.currentItem);
                }
            },
            getSectionRef: function getSectionRef(i) {
                return "computed_section_" + i;
            },
            getSize: function getSize() {
                return this.computedSize;
            },
            getItemByIndex: function getItemByIndex(index) {
                var obj = false;
                if (index === null) return obj;
                for (var i = 0; i < this.computedSections.length; i++) {
                    if (index >= this.computedSections[i].start_index && index <= this.computedSections[i].end_index) {
                        var trueIndex = index - this.computedSections[i].start_index;
                        var childSection = this.$refs["computed_section_" + i][0];
                        if (childSection) {
                            obj = {
                                name: this.computedSections[i].name,
                                type: this.computedSections[i].type,
                                label: childSection.getLabelByIndex(trueIndex),
                                item: childSection.getItemByIndex(trueIndex)
                            };
                            break;
                        }
                    }
                }

                return obj;
            },
            handleKeyStroke: function handleKeyStroke(e) {
                var _this = this;

                var keyCode = e.keyCode;


                var ignoredKeyCodes = [16, // Shift
                9, // Tab
                18, // alt/option
                91, // OS Key
                93 // Right OS Key
                ];

                if (ignoredKeyCodes.indexOf(keyCode) > -1) {
                    return;
                }

                this.loading = false;
                this.didSelectFromOptions = false;
                switch (keyCode) {
                    case 40: // ArrowDown
                    case 38:
                        // ArrowUp
                        e.preventDefault();
                        if (this.isOpen) {
                            if (keyCode === 38 && this.currentIndex === null) {
                                break;
                            }
                            // Determine direction of arrow up/down and determine new currentIndex
                            var direction = keyCode === 40 ? 1 : -1;
                            var newIndex = this.currentIndex + direction;
                            this.setCurrentIndex(newIndex, this.getSize(), direction);
                            this.didSelectFromOptions = true;
                            if (this.getSize() > 0 && this.currentIndex >= 0) {
                                this.setChangeItem(this.getItemByIndex(this.currentIndex));
                                this.didSelectFromOptions = true;
                            } else if (this.currentIndex == -1) {
                                this.currentIndex = null;
                                this.searchInput = this.searchInputOriginal;
                                e.preventDefault();
                            }
                        }
                        break;
                    case 13:
                        // Enter
                        e.preventDefault();
                        if (keyCode === 229) {
                            // https://github.com/moroshko/react-autosuggest/pull/388
                            break;
                        }
                        this.$nextTick(function () {
                            if (_this.getSize() > 0 && _this.currentIndex >= 0) {
                                _this.setChangeItem(_this.getItemByIndex(_this.currentIndex), true);
                                _this.didSelectFromOptions = true;
                            }
                            _this.loading = true;
                            _this.$nextTick(function () {
                                _this._onSelected(_this.didSelectFromOptions);
                            });
                        });
                        break;
                    case 27:
                        // Escape
                        if (this.isOpen) {
                            /* For 'search' input type, make sure the browser doesn't clear the input when Escape is pressed. */
                            this.loading = true;
                            this.currentIndex = null;
                            this.searchInput = this.searchInputOriginal;
                            e.preventDefault();
                        }
                        break;
                }
            },
            setChangeItem: function setChangeItem(item) {
                var overrideOriginalInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

                if (this.currentIndex === null) {
                    this.currentItem = null;
                } else if (item) {
                    this.searchInput = item.label;
                    this.currentItem = item;
                    if (overrideOriginalInput) {
                        this.searchInputOriginal = item.label;
                    }
                }
            },
            updateCurrentIndex: function updateCurrentIndex(index) {
                this.currentIndex = index;
            },
            onDocumentMouseUp: function onDocumentMouseUp() {
                var _this2 = this;

                /** Clicks outside of dropdown to exit */
                if (this.currentIndex === null || !this.isOpen) {
                    this.loading = this.shouldRenderSuggestions();
                    return;
                }

                /** Selects an item in the dropdown */
                this.loading = true;
                this.didSelectFromOptions = true;
                this.setChangeItem(this.getItemByIndex(this.currentIndex), true);
                this.$nextTick(function () {
                    _this2._onSelected(true);
                });
            },
            setCurrentIndex: function setCurrentIndex(newIndex) {
                var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
                var direction = arguments[2];

                var adjustedValue = newIndex;

                // if we hit the lower limit then stop iterating the index
                if (this.currentIndex === null) {
                    adjustedValue = 0;
                }

                if (this.currentIndex < 0 && direction === 1) {
                    adjustedValue = 0;
                }
                // if we hit the upper limit then just stop iterating the index
                if (newIndex >= limit) {
                    adjustedValue = 0;
                }
                this.currentIndex = adjustedValue;

                var element = document.getElementById("autosuggest__results_item-" + this.currentIndex);
                var hoverClass = "autosuggest__results_item-highlighted";
                if (document.querySelector("." + hoverClass)) {
                    this.removeClass(document.querySelector("." + hoverClass), hoverClass);
                }
                if (element) {
                    this.addClass(element, hoverClass);
                }
            },
            onClick: function onClick() {
                this.loading = false;
                this.inputProps.onClick();
            },


            /** DOM Utilities */
            hasClass: function hasClass(el, className) {
                return !!el.className.match(new RegExp("(\\s|^)" + className + "(\\s|$)"));
            },
            addClass: function addClass(el, className) {
                if (!this.hasClass(el, className)) el.className += " " + className;
            },
            removeClass: function removeClass(el, className) {
                if (el.classList) {
                    el.classList.remove(className);
                }
            },
            getSectionName: function getSectionName(section) {
                if (!section.name) {
                    section.name = "default";
                }

                return section.name;
            }
        },
        mounted: function mounted() {
            document.addEventListener("mouseup", this.onDocumentMouseUp);
            this.searchInput = this.inputProps.initialValue; // set default query, e.g. loaded server side.
            this.loading = true;
        },

        watch: {
            searchInput: function searchInput(newValue) {
                this.value = newValue;
                if (!this.didSelectFromOptions) {
                    this.searchInputOriginal = this.value;
                    this.currentIndex = null;
                    this.inputProps.onInputChange(newValue);
                }
            },

            suggestions: {
                immediate: true,
                handler: function handler() {
                    var _this3 = this;

                    this.computedSections = [];
                    this.computedSize = 0;

                    this.suggestions.forEach(function (section) {
                        if (!section.data) return;

                        var name = _this3.getSectionName(section);
                        var _sectionConfigs$name = _this3.sectionConfigs[name],
                            type = _sectionConfigs$name.type,
                            limit = _sectionConfigs$name.limit,
                            label = _sectionConfigs$name.label;

                        /** Set defaults for section configs. */

                        type = type ? type : "default-section";

                        limit = limit ? limit : Infinity;
                        limit = section.data.length < limit ? section.data.length : limit;

                        label = label ? label : section.label;

                        var computedSection = {
                            name: name,
                            label: label,
                            type: type,
                            limit: limit,
                            data: section.data,
                            start_index: _this3.computedSize,
                            end_index: _this3.computedSize + limit - 1
                        };
                        _this3.computedSections.push(computedSection);
                        _this3.computedSize += limit;
                    }, this);
                }
            }
        }
    };
});

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof exports !== "undefined") {
        factory(exports);
    } else {
        var mod = {
            exports: {}
        };
        factory(mod.exports);
        global.DefaultSection = mod.exports;
    }
})(this, function (exports) {
    "use strict";

    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.default = {
        name: "default-section",
        props: {
            section: { type: Object, required: true },
            currentIndex: { type: Number, required: false, default: Infinity },
            updateCurrentIndex: { type: Function, required: true },
            searchInput: { type: String, required: false, default: "" }
        },
        computed: {
            list: function list() {
                var l = this.section.limit;
                if (this.section.data.length < l) {
                    l = this.section.data.length;
                }
                return this.section.data.slice(0, l);
            },
            className: function className() {
                return "autosuggest__results_title autosuggest__results_title_" + this.section.name;
            }
        },
        methods: {
            styleItem: function styleItem(text) {
                if (this.searchInput && typeof text === "string" && this.searchInput !== text) {
                    var value = this.searchInput.trim();
                    var r = new RegExp("" + value, "ig");
                    return text.replace(r, "<b>" + value + "</b>");
                }

                return text;
            },
            getItemIndex: function getItemIndex(i) {
                return this.section.start_index + i;
            },
            getItemByIndex: function getItemByIndex(i) {
                return this.section.data[i];
            },
            getLabelByIndex: function getLabelByIndex(i) {
                return this.section.data[i];
            },
            onMouseEnter: function onMouseEnter(event) {
                this.updateCurrentIndex(event.currentTarget.getAttribute("data-suggestion-index"));
            },
            onMouseLeave: function onMouseLeave() {
                this.updateCurrentIndex(null);
            }
        }
    };
});

/***/ })
/******/ ]);
});